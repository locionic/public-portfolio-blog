{"kind":"FETCH","data":{"headers":{"accept-ranges":"bytes","access-control-allow-origin":"*","cache-control":"max-age=300","connection":"keep-alive","content-encoding":"gzip","content-length":"4662","content-security-policy":"default-src 'none'; style-src 'unsafe-inline'; sandbox","content-type":"text/plain; charset=utf-8","cross-origin-resource-policy":"cross-origin","date":"Fri, 05 Apr 2024 13:51:51 GMT","etag":"W/\"65ce72dddcaf6a83c72ad9629b7c5b8e3ecc2212790210558599ee1ca682eaef\"","expires":"Fri, 05 Apr 2024 13:56:51 GMT","source-age":"7","strict-transport-security":"max-age=31536000","vary":"Authorization,Accept-Encoding,Origin","via":"1.1 varnish","x-cache":"HIT","x-cache-hits":"1","x-content-type-options":"nosniff","x-fastly-request-id":"02ff0ad2841ad746e745e7d4d548f6349874773a","x-frame-options":"deny","x-github-request-id":"9890:1BDE5B:5E832A:755B4F:661001EF","x-served-by":"cache-qpg1255-QPG","x-timer":"S1712325112.591773,VS0,VE1","x-xss-protection":"1; mode=block"},"body":"","status":200,"tags":["/projects/[id]/page"],"url":"https://raw.githubusercontent.com/kunksed/raj.plus/master/content/posts/2018-11-14-google-maps-apis-for-multiple-locations.md"},"revalidate":31536000}