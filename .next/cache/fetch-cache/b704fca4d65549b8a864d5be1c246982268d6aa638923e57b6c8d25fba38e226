{"kind":"FETCH","data":{"headers":{"accept-ranges":"bytes","access-control-allow-origin":"*","cache-control":"max-age=300","connection":"keep-alive","content-encoding":"gzip","content-length":"4843","content-security-policy":"default-src 'none'; style-src 'unsafe-inline'; sandbox","content-type":"text/plain; charset=utf-8","cross-origin-resource-policy":"cross-origin","date":"Fri, 05 Apr 2024 14:18:35 GMT","etag":"W/\"5d5988ebb4698ce73eb44ed15e9e1a22a7ed9bee216285ffaf7dee640379fb77\"","expires":"Fri, 05 Apr 2024 14:23:35 GMT","source-age":"18","strict-transport-security":"max-age=31536000","vary":"Authorization,Accept-Encoding,Origin","via":"1.1 varnish","x-cache":"HIT","x-cache-hits":"1","x-content-type-options":"nosniff","x-fastly-request-id":"eb41d8cb20ea9314cfc5dde23a00ee53ff7f4a8c","x-frame-options":"deny","x-github-request-id":"2782:282FC0:436545:5391AB:66100828","x-served-by":"cache-qpg1263-QPG","x-timer":"S1712326715.016133,VS0,VE1","x-xss-protection":"1; mode=block"},"body":"","status":200,"tags":["/projects/[id]/page"],"url":"https://raw.githubusercontent.com/alexcarpenter/nextjs-mdx-blog-theme/main/posts/kitchen-sink.mdx"},"revalidate":31536000}