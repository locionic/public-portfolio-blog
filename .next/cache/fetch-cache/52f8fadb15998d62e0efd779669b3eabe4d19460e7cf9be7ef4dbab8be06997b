{"kind":"FETCH","data":{"headers":{"accept-ranges":"bytes","access-control-allow-origin":"*","cache-control":"max-age=300","connection":"keep-alive","content-encoding":"gzip","content-length":"15333","content-security-policy":"default-src 'none'; style-src 'unsafe-inline'; sandbox","content-type":"text/plain; charset=utf-8","cross-origin-resource-policy":"cross-origin","date":"Fri, 05 Apr 2024 13:57:38 GMT","etag":"W/\"7aaf45675bb14bfeb81ce49bffd8c58763ac1863592d1c262ade9bfad248ae8b\"","expires":"Fri, 05 Apr 2024 14:02:38 GMT","source-age":"12","strict-transport-security":"max-age=31536000","vary":"Authorization,Accept-Encoding,Origin","via":"1.1 varnish","x-cache":"HIT","x-cache-hits":"1","x-content-type-options":"nosniff","x-fastly-request-id":"530764fc81eb805aff0281f3c763f3d2b38f01a0","x-frame-options":"deny","x-github-request-id":"B86C:2289D4:54E87D:699ECF:66100345","x-served-by":"cache-qpg120084-QPG","x-timer":"S1712325458.266006,VS0,VE1","x-xss-protection":"1; mode=block"},"body":"","status":200,"tags":["/projects/[id]/page"],"url":"https://raw.githubusercontent.com/rahulsrma26/rahulsrma26.github.io/dev/content/articles/gate-2011-solution/index.md"},"revalidate":31536000}